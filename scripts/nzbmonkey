#!/usr/bin/env python

import gc
import os
import re
import sys
import time
import pprint
import logging
import optparse
import ConfigParser

import cPickle as _pickle

import nzbmonkey


class Script(object):

    def __init__(self):
        optparser = optparse.OptionParser()

        optparser.add_option(
            "-c",
            "--config",
            type = "string",
            action = "append",
            default = [],
        )

        (self.options, self.args) = optparser.parse_args()

        # if no config file was specified, use defaults
        config_files = self.options.config or [
            "/etc/nzbmonkey.conf",
            "~/.nzbmonkey.conf",
        ]

        self.config = ConfigParser.ConfigParser()
        self.config.read([os.path.expanduser(x) for x in config_files])


def pstream(filename):
    with file(filename, "rb") as fp:
        while True:
            try:
                yield _pickle.load(fp)
            except EOFError:
                break


class NZBCli(Script):

    _DEFAULT_COMMAND = "catchup"

    def run(self):
        name = self._DEFAULT_COMMAND

        try:
            name = self.args.pop(0)
        except IndexError:
            pass

        if hasattr(self, name):
            getattr(self, name)(*self.args)

    def init(self):
        logging.basicConfig(level = logging.INFO)
        try:
            self._loader = nzbmonkey.Loader(
                host = self.config.get("nzbmonkey", "host"),
                port = self.config.get("nzbmonkey", "port"),
                user = self.config.get("nzbmonkey", "user"),
                password = self.config.get("nzbmonkey", "password"),
                state = self.config.get("nzbmonkey", "state"),
                delta = self.config.get("nzbmonkey", "delta"),
                max_delta = self.config.get("nzbmonkey", "max-delta"),
                groups = re.split("\s+", self.config.get("nzbmonkey", "groups")),
            )
        except (ConfigParser.NoSectionError, ConfigParser.NoOptionError), e:
            sys.stderr.write("A mandatory config option is missing: %s\n" % e.message)
            sys.exit(1)

    def list(self, pattern):
        """
            list groups matching `pattern`
        """
        (response, descs) = self._server.descriptions(pattern)
        for name, title in descs:
            print "%s - %s" % (name, title)

    def catchup(self, groups = "", delta = None):
        """
            create nzb files from the articles of the given groups, or all
            configure groups if none are specified. you max specify your own
            delta if the default delta does not suit you, or if you want to
            fetch more then just the new articles (since the last run)
            all generated nzbs are written to the destination directory
        """

        groups = groups.strip()
        if not groups:
            groups = self._loader.groups
        else:
            groups = groups.split(" ")

        return self._process(self._loader.catchup(groups, delta))

    def download(self, filename, delta = 50000, *groups):
        """
            create nzb files from the articles shelved in `filename`
            and write the resulting nzbs to `dest_dir`
        """

        if not groups or not groups[0]:
            groups = self._loader.groups

        with file(filename, "wb") as fp:
            for data in self._loader.catchup(groups, delta, persist = False):
                _pickle.dump(data, fp, _pickle.HIGHEST_PROTOCOL)

    def nzbs(self, filename):
        """
            create nzb files from the articles pickled in `filename`
            and write the resulting nzbs to `dest_dir`
        """
        return self._process(pstream(filename))

    def _process(self, data):
        t_start = time.time()
        nzbs = self._loader.get("nzbs", nzbmonkey.NZBIndex())
        logging.info("nzbcli - persisted: %d", len(nzbs))
        nzbs = nzbmonkey.process(nzbmonkey.preprocess(data), index = nzbs)
        logging.info("nzbcli - processing took: %.3f", time.time() - t_start)

        t_start = time.time()
        (good, bad) = nzbs.split("complete", nzbmonkey.NZBCheckValue(True))
        logging.info("nzbcli - splitting time: %.3f", time.time() - t_start)

        del nzbs

        for nzb in bad:
            logging.info(
                "nzbcli - skipping parts: %s have: %s group: %s name: %s" % (
                    len(nzb),
                    nzb.parts,
                    nzb.group,
                    nzb.name,
                )
            )

        self._loader["nzbs"] = bad
        del bad

        for nzb in good:
            with file(os.path.join(self.config.get("nzbmonkey", "destination"), nzb.nzb_filename), "w") as fp:
                logging.info(
                    "nzbcli - new file: %s name: %s group: %s" % (
                        nzb.nzb_filename,
                        nzb.name,
                        nzb.group,
                    )
                )
                fp.write(nzb.xml())

    def test_subject(self, subject):
        index = nzbmonkey.process([dict(subject = subject)])

        for item in index:
            pprint.pprint(vars(item))

    def test_subjects(self, filename):
        pprint.pprint(list(nzbmonkey.preprocess(
            [dict(subject = x) for x in file(filename).readlines()]
        )))


if __name__ == "__main__":
    script = NZBCli()
    script.init()
    script.run()


