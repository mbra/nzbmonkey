#!/usr/bin/env python

import gc
import os
import re
import sys
import time
import pprint
import logging
import optparse
import ConfigParser

import cPickle as _pickle

import nzbmonkey

def pstream(filename):
    with file(filename, "rb") as fp:
        while True:
            try:
                yield _pickle.load(fp)
            except EOFError:
                break


class Script(object):

    def __init__(self, loader, options, args, config):
        self._loader = loader
        self._options = options
        self._args = args
        self._config = config
        logging.basicConfig(level = logging.INFO)

    def run(self):
        name = "catchup"

        try:
            name = self._args.pop(0)
        except IndexError:
            pass

        if hasattr(self, name):
            getattr(self, name)(*self._args)

    def list(self, pattern):
        """
            list groups matching `pattern`
        """
        (response, descs) = self._server.descriptions(pattern)
        for name, title in descs:
            print "%s - %s" % (name, title)

    def catchup(self, groups = "", delta = None):
        """
            create nzb files from the articles of the given groups, or all
            configure groups if none are specified. you max specify your own
            delta if the default delta does not suit you, or if you want to
            fetch more then just the new articles (since the last run)
            all generated nzbs are written to the destination directory
        """

        groups = groups.strip()
        if not groups:
            groups = self._loader.groups
        else:
            groups = groups.split(" ")

        nzbs = nzbmonkey.process(
            nzbmonkey.preprocess(self._loader.catchup(groups, delta))
        )

        (good, bad) = nzbs.split("complete", nzbmonkey.NZBCheckValue(True))
        del nzbs

        for nzb in bad:
            sys.stdout.write(
                "skipping (incomplete %s/%s): %s\n" % (
                    nzb.length,
                    nzb.parts,
                    nzb.subject,
                )
            )
        del bad

        for nzb in good:
            with file(os.path.join(self._config.get("nzbmonkey", "destination"), nzb.nzb_filename), "w") as fp:
                print "adding: %s (%s)" % (nzb.name, nzb.nzb_filename)
                fp.write(nzb.xml())

    def download(self, filename, delta = 50000, *groups):
        """
            create nzb files from the articles shelved in `filename`
            and write the resulting nzbs to `dest_dir`
        """

        if not groups or not groups[0]:
            groups = self._loader.groups

        with file(filename, "wb") as fp:
            for data in self._loader.catchup(groups, delta, persist = False):
                _pickle.dump(data, fp, _pickle.HIGHEST_PROTOCOL)

    def nzbs(self, filename):
        """
            create nzb files from the articles pickled in `filename`
            and write the resulting nzbs to `dest_dir`
        """

        t_start = time.time()
        nzbs = nzbmonkey.process(nzbmonkey.preprocess(pstream(filename)))
        logging.info("nzbs - processing took: %.3f", time.time() - t_start)

        t_start = time.time()
        (good, bad) = nzbs.split("complete", nzbmonkey.NZBCheckValue(True))
        logging.info("nzbs - splitting time: %.3f", time.time() - t_start)

        del nzbs


        for nzb in bad:
            sys.stdout.write(
                "skipping (incomplete:%d): %s %s\n" % (
                    len(nzb),
                    nzb.name,
                    nzb.subject,
                )
            )
        del bad

        for nzb in good:
            with file(os.path.join(self._config.get("nzbmonkey", "destination"), nzb.nzb_filename), "w") as fp:
                print "adding: %s (%s)" % (nzb.name, nzb.nzb_filename)
                fp.write(nzb.xml())

    def test_subject(self, subject):
        index = nzbmonkey.process([dict(subject = subject)])

        for item in index:
            pprint.pprint(vars(item))

    def test_subjects(self, filename):
        pprint.pprint(list(nzbmonkey.preprocess(
            [dict(subject = x) for x in file(filename).readlines()]
        )))


if __name__ == "__main__":
    optparser = optparse.OptionParser()

    optparser.add_option(
        "-c",
        "--config",
        type = "string",
        action = "append",
        default = [],
    )

    (options, args) = optparser.parse_args()

    # if no config file was specified, use defaults
    if not options.config:
        options.config =  ["/etc/nzbmonkey.conf", "~/.nzbmonkey.conf"]

    config = ConfigParser.ConfigParser()
    config.read([os.path.expanduser(x) for x in options.config])

    try:
        loader = nzbmonkey.Loader(
            host = config.get("nzbmonkey", "host"),
            port = config.get("nzbmonkey", "port"),
            user = config.get("nzbmonkey", "user"),
            password = config.get("nzbmonkey", "password"),
            state = config.get("nzbmonkey", "state"),
            delta = config.get("nzbmonkey", "delta"),
            max_delta = config.get("nzbmonkey", "max-delta"),
            groups = re.split("\s+", config.get("nzbmonkey", "groups")),
        )
    except (ConfigParser.NoSectionError, ConfigParser.NoOptionError), e:
        sys.stderr.write("A mandatory config option is missing: %s\n" % e.message)
        sys.exit(1)

    script = Script(loader, options, args, config)
    script.run()


